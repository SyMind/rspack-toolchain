name: 'Get NAPI Info'
description: 'Extract napi.targets from package.json and generate build matrix'
inputs:
  package-json-path:
    description: 'Path to binding package.json'
    required: false
    default: 'crates/binding/package.json'
  napi-build-command:
    description: 'Command to call napi build'
    required: false
    default: 'pnpm build'
outputs:
  matrix:
    description: 'Generated build matrix for napi targets'
    value: ${{ steps.generate.outputs.matrix }}
  binding-path:
    description: 'Path to directory containing *.node files'
    value: ${{ steps.paths.outputs.binding-path }}
  targets:
    description: 'List of napi targets'
    value: ${{ steps.generate.outputs.targets }}
runs:
  using: 'composite'
  steps:
    - name: Calculate paths
      id: paths
      run: |
        BINDING_DIR=$(dirname "${{ inputs.package-json-path }}")
        echo "binding-path=$BINDING_DIR" >> $GITHUB_OUTPUT
        echo "Binding directory: $BINDING_DIR"
      shell: bash
    - name: Generate build matrix
      id: generate
      run: |
        # Check if package.json exists
        if [ ! -f "${{ inputs.package-json-path }}" ]; then
          echo "Error: ${{ inputs.package-json-path }} not found"
          exit 1
        fi

        # Extract napi.targets from package.json
        targets=$(cat "${{ inputs.package-json-path }}" | jq -r '.napi.targets[]?')

        if [ -z "$targets" ]; then
          echo "Error: No napi.targets found in package.json"
          exit 1
        fi

        # Define supported platforms and their build configurations
        declare -A supported_platforms
        supported_platforms["x86_64-apple-darwin"]='{"host": "macos-latest", "target": "x86_64-apple-darwin", "build": "${{ inputs.napi-build-command }} --target x86_64-apple-darwin"}'
        supported_platforms["x86_64-pc-windows-msvc"]='{"host": "windows-latest", "target": "x86_64-pc-windows-msvc", "build": "${{ inputs.napi-build-command }} --target x86_64-pc-windows-msvc"}'
        supported_platforms["i686-pc-windows-msvc"]='{"host": "windows-latest", "target": "i686-pc-windows-msvc", "build": "${{ inputs.napi-build-command }} --target i686-pc-windows-msvc"}'
        supported_platforms["x86_64-unknown-linux-gnu"]='{"host": "ubuntu-22.04", "target": "x86_64-unknown-linux-gnu", "build": "${{ inputs.napi-build-command }} --target x86_64-unknown-linux-gnu --use-napi-cross"}'
        supported_platforms["x86_64-unknown-linux-musl"]='{"host": "ubuntu-22.04", "target": "x86_64-unknown-linux-musl", "build": "${{ inputs.napi-build-command }} --target x86_64-unknown-linux-musl -x"}'
        supported_platforms["aarch64-apple-darwin"]='{"host": "macos-latest", "target": "aarch64-apple-darwin", "build": "${{ inputs.napi-build-command }} --target aarch64-apple-darwin"}'
        supported_platforms["aarch64-unknown-linux-gnu"]='{"host": "ubuntu-22.04", "target": "aarch64-unknown-linux-gnu", "build": "${{ inputs.napi-build-command }} --target aarch64-unknown-linux-gnu --use-cross"}'
        supported_platforms["armv7-unknown-linux-gnueabihf"]='{"host": "ubuntu-22.04", "target": "armv7-unknown-linux-gnueabihf", "build": "${{ inputs.napi-build-command }} --target armv7-unknown-linux-gnueabihf --use-cross"}'
        supported_platforms["aarch64-linux-android"]='{"host": "ubuntu-22.04", "target": "aarch64-linux-android", "build": "${{ inputs.napi-build-command }} --target aarch64-linux-android"}'
        supported_platforms["armv7-linux-androideabi"]='{"host": "ubuntu-22.04", "target": "armv7-linux-androideabi", "build": "${{ inputs.napi-build-command }} --target armv7-linux-androideabi"}'
        supported_platforms["aarch64-unknown-linux-musl"]='{"host": "ubuntu-22.04", "target": "aarch64-unknown-linux-musl", "build": "${{ inputs.napi-build-command }} --target aarch64-unknown-linux-musl -x"}'
        supported_platforms["aarch64-pc-windows-msvc"]='{"host": "windows-latest", "target": "aarch64-pc-windows-msvc", "build": "${{ inputs.napi-build-command }} --target aarch64-pc-windows-msvc"}'

        # Validate targets and build matrix
        matrix_items=()
        unsupported_targets=()

        for target in $targets; do
          if [[ -n "${supported_platforms[$target]}" ]]; then
            matrix_items+=("${supported_platforms[$target]}")
          else
            unsupported_targets+=("$target")
          fi
        done

        # Check for unsupported targets
        if [ ${#unsupported_targets[@]} -gt 0 ]; then
          echo "Error: Unsupported targets found: ${unsupported_targets[*]}"
          echo "Supported targets are:"
          for key in "${!supported_platforms[@]}"; do
            echo "  - $key"
          done
          exit 1
        fi

        # Generate matrix JSON
        matrix_json=$(printf '%s\n' "${matrix_items[@]}" | jq -s -c '{"settings": .}')

        # Use proper multiline output format for GitHub Actions
        {
          echo "matrix<<EOF"
          echo "$matrix_json"
          echo "EOF"
        } >> $GITHUB_OUTPUT

        # Also output targets for reference
        targets_json=$(echo "$targets" | jq -R -s -c 'split("\n")[:-1]')
        {
          echo "targets<<EOF"
          echo "$targets_json"
          echo "EOF"
        } >> $GITHUB_OUTPUT

        echo "Generated matrix for targets: $targets"
        echo "Matrix: $matrix_json"
      shell: bash
